# DOM in JavaScript - Chai aur Code Notes

## Introduction to DOM
- DOM stands for Document Object Model
- It's a programming interface for web documents
- Represents the page so that programs can change the document structure, style, and content
- DOM represents the document as nodes and objects
- Browser creates the DOM when a page loads, allowing JavaScript to interact with HTML elements
- The DOM is not part of JavaScript but a Web API provided by browsers
- The DOM is language-agnostic but commonly accessed with JavaScript
- Four pillar DOM nodes: document, element, text, and attribute nodes
- Visualization: HTML code → parsed by browser → DOM tree creation → JavaScript can interact

## DOM Tree Structure
- DOM organizes HTML as a tree structure called the DOM tree
- Each element becomes a node in the tree
- The document object is the root node
- Elements have parent-child relationships that reflect HTML nesting
- Three main types of nodes:
    - Element nodes (HTML elements)
    - Text nodes (text content)
    - Attribute nodes (element attributes)
- Browser DevTools allows visualization of the DOM tree
- The DOM is dynamic - changes to it are reflected immediately on the page

## Window vs Document
- Window is the global object in browser JavaScript
- Document is a property of the window object
- Window represents the browser window/tab
- Document represents the HTML document loaded in the window
- Usage: window.document or simply document
- Window contains properties like history, location, navigator, screen
- Document focuses on the HTML content within the window

## Accessing DOM Elements
- `document.getElementById('id')` - Get element by its ID
- `document.getElementsByClassName('class')` - Get elements by class name (returns HTMLCollection)
- `document.getElementsByTagName('tag')` - Get elements by tag name (returns HTMLCollection)
- `document.querySelector('selector')` - Get first element matching CSS selector
- `document.querySelectorAll('selector')` - Get all elements matching CSS selector (returns NodeList)
- Differences between NodeList and HTMLCollection:
    - NodeList can contain any node type, HTMLCollection only contains elements
    - Some NodeLists are live (auto-updating), others are static
    - HTMLCollection is always live (auto-updating)
    - NodeList supports forEach method, HTMLCollection doesn't
    - Both are array-like but not true arrays (need Array.from() for array methods)
    - querySelector methods return static NodeLists, getElement methods return live HTMLCollections
    - Performance: getElement methods are slightly faster than querySelector methods

## NodeList vs HTMLCollection In-Depth
- HTMLCollection:
    - Live collection that updates automatically when DOM changes
    - Accessed by index (collection[0]) or by ID/name (collection.namedItem('id'))
    - No built-in forEach method - must convert to array first
    - Only contains element nodes (no text or comment nodes)
    - Returned by methods like getElementsByClassName(), getElementsByTagName()
    
- NodeList:
    - Can be live or static depending on how it's created
    - Supports forEach() method natively
    - Can contain any node type (element, text, comment)
    - Indexed like arrays (nodeList[0]) but not a true array
    - Returned by querySelectorAll() (static) and node.childNodes (live)
    - Doesn't update automatically when using querySelectorAll()

- Converting to Arrays:
    - `Array.from(collection)` - ES6 method
    - `[...collection]` - Spread operator (ES6)
    - `Array.prototype.slice.call(collection)` - Traditional approach

## Manipulating DOM Elements
- `element.innerHTML` - Get/set HTML content (can pose security risks with user input)
- `element.textContent` - Get/set text content without HTML parsing (includes hidden text)
- `element.innerText` - Get/set visible text content (respects CSS styling)
- `element.setAttribute('attr', 'value')` - Set attribute value
- `element.getAttribute('attr')` - Get attribute value
- `element.style.property = 'value'` - Change CSS styles (camelCase for properties)
- `element.classList` methods:
    - `add('class')` - Add a class
    - `remove('class')` - Remove a class
    - `toggle('class')` - Toggle a class
    - `contains('class')` - Check if class exists

## Creating and Modifying Elements
- `document.createElement('tag')` - Create a new element
- `parent.appendChild(child)` - Add a child element at the end
- `parent.insertBefore(newChild, referenceChild)` - Insert before specific child
- `parent.removeChild(child)` - Remove a child element
- `element.remove()` - Remove the element (modern browsers)
- `parent.replaceChild(newChild, oldChild)` - Replace a child element
- `document.createTextNode('text')` - Create a text node
- `document.createDocumentFragment()` - Create lightweight container for batch operations
- Modern insertion methods:
    - `element.append()` - Add nodes or strings at the end (can add multiple)
    - `element.prepend()` - Add nodes or strings at the beginning
    - `element.before()` - Add nodes or strings before the element
    - `element.after()` - Add nodes or strings after the element
    - `element.replaceWith()` - Replace element with nodes or strings

## Creating DOM Elements In Practice
- Basic element creation workflow:
  1. Create element: `const div = document.createElement('div')`
  2. Add attributes/content: `div.className = 'container'; div.textContent = 'Hello'`
  3. Append to DOM: `document.body.appendChild(div)`
- Creating complex elements:
  ```javascript
  const card = document.createElement('div');
  card.className = 'card';
  
  const img = document.createElement('img');
  img.src = 'profile.jpg';
  img.alt = 'Profile Image';
  
  const title = document.createElement('h2');
  title.textContent = 'User Name';
  
  card.appendChild(img);
  card.appendChild(title);
  document.body.appendChild(card);
  ```
- Using DocumentFragment for batch operations:
  ```javascript
  const fragment = document.createDocumentFragment();
  for (let i = 0; i < 1000; i++) {
      const item = document.createElement('li');
      item.textContent = `Item ${i}`;
      fragment.appendChild(item);
  }
  document.getElementById('list').appendChild(fragment);
  ```
- Cloning existing elements:
  ```javascript
  const original = document.getElementById('template');
  const clone = original.cloneNode(true); // true for deep clone
  clone.id = 'newId';
  document.body.appendChild(clone);
  ```

## DOM Events
- `element.addEventListener('event', function)` - Add event listener
- `element.removeEventListener('event', function)` - Remove event listener
- Common events: click, mouseover, mouseout, keydown, keyup, submit, load, DOMContentLoaded, change
- Event object properties:
    - `event.target` - Element that triggered the event
    - `event.currentTarget` - Element that the event listener is attached to
    - `event.preventDefault()` - Prevent default behavior
    - `event.stopPropagation()` - Stop event bubbling

## Event Propagation
- Three phases of event propagation:
    1. Capturing phase (top-down)
    2. Target phase (the element itself)
    3. Bubbling phase (bottom-up)
- Control with the third parameter in addEventListener:
    - `element.addEventListener('click', handler, true)` - Capturing phase
    - `element.addEventListener('click', handler, false)` - Bubbling phase (default)
- Event delegation: Adding event listeners to parent elements to handle events for multiple children

## DOM Traversal
- `element.parentNode` / `element.parentElement` - Access parent
- `element.childNodes` - Access all child nodes (including text nodes)
- `element.firstChild` / `element.lastChild` - First/last child (including text nodes)
- `element.nextSibling` / `element.previousSibling` - Next/previous sibling (including text nodes)
- `element.children` - Access element children (HTML elements only)
- `element.firstElementChild` / `element.lastElementChild` - First/last element child
- `element.nextElementSibling` / `element.previousElementSibling` - Next/previous element sibling

## DOM Manipulation Best Practices
- Minimize DOM operations for better performance
- Use document fragments for batch operations
- Cache DOM references when repeatedly accessing elements
- Use event delegation for handling multiple elements' events
- Prefer textContent over innerHTML when security is a concern
- Consider using modern APIs like append(), prepend(), before(), after() for insertion
- Use requestAnimationFrame() for animations and visual updates